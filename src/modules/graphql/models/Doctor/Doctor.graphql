# import UserInterface from '../../interfaces/UserInterface.graphql'
# import ApiError from '../ApiError/ApiError.graphql'
# import DateTime from '../../scalars//DateTime/DateTime.graphql'

input DoctorInput {
    socialCareNumber: String!
    idCard: String!
    name: String!
    surname: String!
    username: String
    birthDate: DateTime
    genre: String!
    membershipNumber: String!
    # TODO replace this field type with the MedicalSpeciality object type, once it's created.
    specialities: [ID]
}

type Doctor implements UserInterface {
    id: ID
    socialCareNumber: String
    idCard: String
    name: String
    surname: String
    birthDate: DateTime
    genre: String
    username: String
    role: Int
    token: String
    lastLoginAt: DateTime
    createdAt: DateTime
    updatedAt: DateTime
    enabled: Boolean
    membershipNumber: String
    # TODO replace this field type with the MedicalSpeciality object type, once it's created.
    specialities: [ID]
    assignedPatients: [ID]
}

union DoctorUnion = Doctor | ApiError

type Query {
    getDoctorById(id: String!): DoctorUnion!
}

type Mutation {
    createNewDoctor(data: DoctorInput!): DoctorUnion!
}